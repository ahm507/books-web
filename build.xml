<project xmlns:jacoco="antlib:org.jacoco.ant" name="Finance" default="all">

<!--

I can reuse the same file if I followed exactely the same file/folder convention

-->

  <property file="build.properties"/>

	
  <!-- ===============================================================================  -->
   
   <import file="${tomcat-home}/bin/catalina-tasks.xml"/>
    
    <path id="tomcat-classpath">
		<fileset dir="./WebContent/WEB-INF/lib">
        	<include name="*.jar"/>
    	</fileset>
    	<pathelement location="test/selenium/selenium-java-2.33.0.jar"/>	
    	<pathelement location="test/junit-4.11.jar"/>

		<fileset dir="/Users/Macpro/Server/apache-tomcat-7.0.41/lib">
        	<include name="*.jar"/>
    	</fileset>
    	
    	<pathelement location="./binary"/>
    		
    	
	</path>
    
    <target name="ci" description="pretend as Continuous Integration server">
    	<tstamp>
			<format property="BUILD-FOLDER" pattern="yyyy-mm-dd_HH-mm-ss"/>
		</tstamp>
    	<mkdir dir="${BUILD-FOLDER}"/>
    
    	<exec executable="/usr/local/bin/svn">
	    	<arg value="co" />
    		<arg value="svn://localhost/${app-name}" />
    		<arg value="./${BUILD-FOLDER}/" />
		</exec>
    
    	<ant antfile="build.xml" dir="./${BUILD-FOLDER}/">
    		<target name="compile"/>
    		<target name="package"/>
    		<target name="test"/> 
    	</ant>
    	
    </target>
    
    
    <target name="all" depends="clean, compile, package, deploy">
    </target>

    <target name="clean" description="remove all target war files">
        <delete dir="war" quiet="true" />
        <delete dir="binary" quiet="true" />
        <delete dir="binary-jsp" quiet="true" />
    </target>

	<path id="app-classpath">
		<fileset dir="./WebContent/WEB-INF/lib">
        	<include name="*.jar"/>
    	</fileset>
    	
		<fileset dir="./test">
        	<include name="**/*.jar"/>
    	</fileset>
    	
    	
    	<pathelement location="test/selenium/selenium-java-2.33.0.jar"/>	
    	<pathelement location="test/junit-4.11.jar"/>
    	<pathelement location="test/easymock/easymock-3.2.jar"/>
    	
	</path>

	<target name="compile" depends="" description="compile">
		<echo message="Step 1: compile java code"/>
			<mkdir dir="binary"/>
			<javac srcdir="./src" destdir="./binary" includeantruntime="true" verbose="false" debug="true">
				<include name="**/*.java"/>
		    	<classpath refid="app-classpath" />
			</javac>

		<!-- copy META-INF -->
		<mkdir dir="binary/META-INF"/>
    	<copy todir="./binary/META-INF">
    	    <fileset dir="./src/META-INF">
    	    </fileset>
    	</copy>

		<echo message="Step 2: transalte jsp to servlet java code"/>
		 
			<jasper validateXml="false"  uriroot="./"  
				outputDir="./binary-jsp" /> 

		<echo message="Step 3: compile the generated servlet code"/>

		<javac srcdir="./binary-jsp" destdir="./binary-jsp" includeantruntime="true" verbose="false">
			<include name="**/*.java"/>
		    <classpath refid="tomcat-classpath"/>
		</javac>

			
    </target>

    <target name="package" depends="compile" description="create package">
        <!-- copying lib, html, conf files and any other required files -->
       
        <mkdir dir="war"/>

		<copy todir="./war">
    	    <fileset dir="./WebContent">
    	    </fileset>
    	</copy>

		<copy todir="./war/WEB-INF/classes">
    	    <fileset dir="./binary">
    	    	<include name="**/*.class"/>

    			<exclude name="**/*Test.class"/>
    			<exclude name="**/TestLib.class"/>
    			
    	    </fileset>
    	</copy>


    </target>


	<target name="check-svn-entries">
        <available file=".svn/entries" property="svn.entries.present"/>
    </target>

    <!-- 
    Magic command:
    
		svnversion . | perl -p -e "s/([\d]*:)(\d+[M|S]*).*/\$2/"
    	but require stripping the new line
    -->
    
    
    <target name="revision-number" depends="check-svn-entries" if="svn.entries.present">
      <loadfile srcfile=".svn/entries" property="revision">
        <filterchain>
          <headfilter lines="1" skip="3"/>
		 <striplinebreaks />
	    <trim />          
        </filterchain>
      </loadfile>
      <echo file="REVISION.txt" message="${revision}"/>  

    </target>    
    
	<target name="zip" depends="package, revision-number">
		<!--  Delete old revisions -->	
	    <delete file="${app-name}*.zip">
	        <fileset dir="." includes="${app-name}*.zip"/>
	    </delete>
	
		<zip destfile="${app-name}-r${revision}.zip">
			<fileset dir="war"/>
		</zip>
	</target>
	
	
    <target name="deploy" depends="compile, package" description="deploy to tomcat, uses sync to ensure match">
    	<sync includeEmptyDirs="yes" todir="${tomcat-home}/webapps/${app-folder}">
    	  <fileset dir="war"/>
    	</sync>    	
    	
    </target>

	<!-- ============================================================== -->
	<!-- Tomcat tasks - remove these if you don't have Tomcat installed -->
	<!-- ============================================================== -->

	    <path id="catalina-ant-classpath">
	        <fileset dir="${tomcat-home}/lib">
	            <include name="*.jar"/>
	        </fileset>
	    </path>

	    <taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask">
	        <classpath refid="catalina-ant-classpath"/>
	    </taskdef>
	
	    <target name="reload" description="Reload application in Tomcat">
	        <reload url="http://localhost:8080/manager/text"
	                 username="admin"
	                 password="allfree"
	                 path="/${app-folder}"/>
	    </target>

	    <target name="reload-amazon" description="Reload application in Tomcat on EC2">
	        <reload url="http://54.221.213.114/manager/text"
	                 username="admin"
	                 password="HardSec22"
	                 path="/${app-folder}"/>
	    </target>

	    <target name="reload-digital-root" description="Reload application in Tomcat on DigitalOcean Cloud">
	        <reload url="http://107.170.121.44/manager/text"
	                 username="admin"
	                 password="allfree2allfree"
	                 path="/ROOT"/>
	    </target>

    <target name="reload-digital-app" description="Reload application in Tomcat on DigitalOcean Cloud">
        <reload url="http://107.170.121.44/manager/text"
                 username="admin"
                 password="allfree2allfree"
                 path="${app-folder}"/>
    </target>

	<!-- End Tomcat tasks -->
	
	<target name="shutdown" description="Shutdown Tomcat">
	  <exec executable="./tomcat-shutdown.sh"/>
	</target>

	<target name="start" description="restart tomcat">
	  <exec executable="./tomcat-start.sh"/>
	</target>

	<target name="restart" description="restart tomcat" depends="shutdown, start">
	</target>


	<target name="doc" description="Generates javadoc">

		<javadoc destdir="docs/api" classpathref="app-classpath"
		
             windowtitle="${app-name} Application API"
             doctitle="${app-name} Application API"
             bottom="Copyright &#169; 2012-2013 Salary Control, Inc.">

 			<fileset dir="src/" defaultexcludes="yes">
    		</fileset>

	</javadoc>
		
	
	
	</target>
	

	<!-- ============================================================== -->
	<!-- Test Target											        -->
	<!-- ============================================================== -->


	<path id="test-classpath">

    	<pathelement location="test/junit-4.11.jar"/>
    	<pathelement location="test/hamcrest-core-1.3.jar"/>
    	<pathelement location="test/jdepend-2.9.1.jar"/>

    	<pathelement path="./binary"/>

		<fileset dir="war/WEB-INF/lib">
        	<include name="**/*.jar"/>
    	</fileset>

		<fileset dir="test">
        	<include name="**/*.jar"/>
    	</fileset>

	</path>
 
	<target name="test" depends="compile, package" description="Run unit test cases">
        <delete dir="binary-test/unit-test" quiet="true" />
    	<mkdir  dir="binary-test/unit-test"/>

		<junit printsummary="yes" haltonfailure="no" fork="no"> <!-- showoutput="yes"  -->
			<classpath>
				<path refid="test-classpath"/>
			</classpath>
			
			<formatter type="brief" usefile="false"/>
			<formatter type="xml"/>
					
			<batchtest todir="./binary-test/unit-test">
				<fileset dir="src">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>	
	


	<!-- ============================================================== -->
	<!-- PMD Target											        -->
	<!-- ============================================================== -->


	<path id="pmd-classpath">
		<fileset dir="test/pmd">
			<include name="*.jar"/>
		</fileset>
	</path>

	<target name="pmd">
	 <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
	        <classpath refid="pmd-classpath"/>
	 </taskdef>

	 <pmd rulesetfiles="./pmd-rulesets.xml">
		<sourceLanguage name="java" version="1.6"/>
		<sourceLanguage name="ecmascript" version="3"/>
				
		<formatter type="xml" toFile="pmd_report.xml">
			<param name="linkPrefix" value="http://pmd.sourceforge.net/xref/"/>
		</formatter>

        <formatter type="html" toFile="pmd_report.html" toConsole="true"/>
		
		<fileset dir="./">
			<include name="src/**/*.java"/>
			<!--include name="pages/**/*.jsp"/-->
		</fileset>
	 </pmd>
	 
	</target>


	<!-- ============================================================== -->
	<!-- PMD CPD (Copy and Paste Detector)						        -->
	<!-- ============================================================== -->

<target name="cpd" description="Duplicate code analysis">
    <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask">
    	<classpath refid="pmd-classpath"/>
    </taskdef>

    <cpd minimumTokenCount="100" format="xml" outputFile="pmd-cpd.xml">
        <fileset dir="./src">
            <include name="**/*.java"/>
        </fileset>
    </cpd>
</target>


	<!-- ============================================================== -->
	<!-- SONAR	         										        -->
	<!-- ============================================================== -->
	
	<!-- &amp;characterEncoding=utf8 -->
<!--	
	<property name="sonar.jdbc.url" value="jdbc:h2:tcp://localhost/sonar" />
	<property name="sonar.jdbc.username" value="sonar" />
	<property name="sonar.jdbc.password" value="sonar" /> 
	<property name="sonar.projectKey" value="finance" />
	<property name="sonar.projectName" value="${app-name} Java Project analyzed with the SonarQube Ant Task" />
	<property name="sonar.projectVersion" value="1.0" />
	<property name="sonar.language" value="java" />
	<property name="sonar.sources" value="src" />

	<target name="sonar">
		<taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
			<classpath path="somefolder/sonar-ant-task-2.1.jar" />
		</taskdef>
		
		<sonar:sonar />
		
	</target>

-->

	<!-- ============================================================== -->
	<!-- JDepend	         										        -->
	<!-- ============================================================== -->


  <path id="jdepend.classpath">
    <pathelement location="test/jdepend-2.9.1.jar"/>
  </path>
   
  <property name="run.dir" location="war/WEB-INF/classes"/>

  <target name="jdepend" depends="package" description="Runs JDepend on itself">

    <java classname="jdepend.textui.JDepend" fork="yes">
      <classpath refid="jdepend.classpath"/>
      <arg file="${run.dir}"/>
    </java>
    
  </target>


	<!-- ============================================================== -->
	<!-- EMMA code coverage										        -->
	<!-- ============================================================== -->


<!--

  <path id="emma.lib" >
    <pathelement location="./test/emma/emma.jar" />
    <pathelement location="./test/emma/emma_ant.jar" />
  </path>

  <taskdef resource="emma_ant.properties" classpath="" classpathref="emma.lib">
  		<classpath refid="emma.lib" />
  </taskdef>

  <property name="src.dir" value="./src" />

  <target name="emma" >
  
  	    <mkdir dir="./binary-test/emma" />
	    <mkdir dir="./binary-test/emma/classes" />
  	    
  	    <javac debug="on" srcdir="./src" destdir="./binary-test/emma/classes">
			<classpath refid="app-classpath" />
			<include name="**/*.java"/>
  	    </javac>
  	    
		<emmajava enabled="true" classname="Main" libclasspathref="emma.lib" classpath="emma.lib">
    	</emmajava>
    	
    	
       <emma enabled="true" verbosity="verbose">

        <instr instrpath="./binary-test/emma/classes"
                     destdir="./binary-test/emma/out"        
                     metadatafile="${coverage.dir}/metadata.em"
                     merge="true" 
                     mode="copy">
        </instr>
    </emma>
  	    
  	
  
  </target>


-->



	<!-- ============================================================== -->
	<!-- JaCoCo code coverage										        -->
	<!-- ============================================================== -->


	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="test/jacoco/jacocoant.jar"/>
	</taskdef>

  <path id="jacoco.classpath" >

	<fileset dir="test/jacoco/">
			<include name="*.jar"/>
		</fileset>    
  </path>

	<target name="cover" depends="">
	
		<jacoco:coverage destfile="./binary-test/jacoco.file">
			
			    <junit fork="true" forkmode="once">
					<classpath>
						<path refid="test-classpath"/>
					</classpath>			    
					<batchtest todir="./test/test-result">
						<fileset dir="src">
							<include name="**/*Test.java"/>
						</fileset>
					</batchtest>
			
				</junit>
			
		</jacoco:coverage>
	
	
	<jacoco:report>
                        
   		 <executiondata>
    	    <file file="./binary-test/jacoco.file"/>
    	</executiondata>
                        
    	<structure name="Finnce Code Coverage">
        	
        	<classfiles>
            	<fileset dir="binary">
            		  <exclude name="**/*Test.class"/>
            	</fileset>
        	</classfiles>
        	
	        <sourcefiles encoding="UTF-8">
    	        <fileset dir="src">
    	        </fileset>
        	</sourcefiles>
    	</structure>
                        
    	<html destdir="binary-test/coverage-report"/>
                        
	</jacoco:report>
	
	</target>


 


</project>